-- migrate:up
CREATE SCHEMA IF NOT EXISTS dashboard AUTHORIZATION app_admin;

grant usage on schema dashboard to postgres, anon, authenticated, service_role;
alter default privileges in schema dashboard grant all on tables to postgres, anon, authenticated, service_role;
alter default privileges in schema dashboard grant all on functions to postgres, anon, authenticated, service_role;
alter default privileges in schema dashboard grant all on sequences to postgres, anon, authenticated, service_role;
-- dashboard.users definition
CREATE TABLE dashboard.users (
    id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
    auth_id uuid references auth.users NULL,
    name text not NULL,
    phone text not NULL,
    company text not NULL,
    authorized boolean not NULL default 'false',
    wechat_uuid text NULL,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    PRIMARY KEY (id)
);
-- dashboard.modules definition
CREATE TABLE dashboard.modules (
    id uuid NOT NULL DEFAULT extensions.uuid_generate_v4(),
    name text,
    des text,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    PRIMARY KEY (id)
);
-- dashboard.topics definition
CREATE TABLE dashboard.topics (
    id bigint generated by default as identity,
    name text,
    icon text,
    des text,
    created_at timestamptz NULL,
    updated_at timestamptz NULL,
    PRIMARY KEY (id)
);
INSERT INTO dashboard.modules (name, des)
VALUES ('system', 'dashboard system administration');
INSERT INTO dashboard.topics (name, des, icon)
VALUES ('data', 'system data', 'database'),
('log', 'system log', 'log');

GRANT ALL PRIVILEGES ON SCHEMA dashboard TO app_admin;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA dashboard TO app_admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA dashboard TO app_admin;
ALTER USER app_admin SET search_path = "dashboard";
ALTER table "dashboard".modules OWNER TO app_admin;
ALTER table "dashboard".topics OWNER TO app_admin;